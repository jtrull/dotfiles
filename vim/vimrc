" No vi compatibility
if &compatible
  set nocompatible
endif

if !empty(glob('/usr/local/opt/fzf'))
    set rtp+=/usr/local/opt/fzf
elseif !empty(glob('~/.linuxbrew/opt/fzf'))
    set rtp+=~/.linuxbrew/opt/fzf
endif

packadd minpac

call minpac#init()
call minpac#add('k-takata/minpac', {'type': 'opt'})
call minpac#add('scrooloose/nerdtree')
call minpac#add('Xuyuanp/nerdtree-git-plugin')
call minpac#add('skywind3000/asyncrun.vim')
call minpac#add('janko-m/vim-test')
call minpac#add('mattn/emmet-vim')
call minpac#add('mileszs/ack.vim')
call minpac#add('vim-ruby/vim-ruby')
call minpac#add('noprompt/vim-yardoc')
call minpac#add('tpope/vim-abolish')
call minpac#add('tpope/vim-characterize')
call minpac#add('tpope/vim-commentary')
call minpac#add('tpope/vim-fugitive')
call minpac#add('tpope/vim-rails')
call minpac#add('tpope/vim-surround')
call minpac#add('tpope/vim-repeat')
call minpac#add('tpope/vim-unimpaired')
call minpac#add('tpope/vim-endwise')
call minpac#add('tpope/vim-bundler')
call minpac#add('tpope/vim-rake')
call minpac#add('tpope/vim-rbenv')
call minpac#add('tpope/vim-eunuch')
call minpac#add('w0rp/ale')
call minpac#add('airblade/vim-gitgutter')
call minpac#add('gregsexton/gitv')
call minpac#add('junegunn/goyo.vim')
call minpac#add('junegunn/limelight.vim')
call minpac#add('junegunn/fzf.vim')
call minpac#add('vim-airline/vim-airline')
call minpac#add('joshdick/onedark.vim')
call minpac#add('qpkorr/vim-bufkill')
call minpac#add('AndrewRadev/splitjoin.vim')
call minpac#add('mbbill/undotree')
packloadall

" ALE
let g:ale_set_balloons=0

" FZF
nmap <leader>\ :<C-u>Buffers<CR>
nmap <C-p> :<C-u>Files<CR>
let $FZF_DEFAULT_COMMAND='ag --nocolor -g ""'

" vim-test configuration
let test#strategy = "asyncrun"
nmap <silent> <leader>Tt :silent! wa <bar> TestNearest<CR>
nmap <silent> <leader>Tf :silent! wa <bar> TestFile<CR>
nmap <silent> <leader>Ta :silent! wa <bar> TestSuite<CR>
nmap <silent> <leader>Tl :silent! wa <bar> TestLast<CR>
nmap <silent> <leader>Tg :silent! wa <bar> TestVisit<CR>

" NERDtree
nmap <silent> <leader>e :NERDTreeToggle<CR>

" EMMET
let g:user_emmet_install_global = 0
autocmd FileType html,css EmmetInstall

" Undotree
nnoremap <silent> <leader>u :UndotreeToggle<CR>
if has("persistent_undo")
    set undodir=$HOME/.vim/undo
    set undofile
endif

" pretty colors
if (has("termguicolors"))
    set termguicolors
endif
filetype plugin indent on
syntax on
colorscheme onedark
hi SpecialComment gui=underline ctermfg=59 guifg=#5C6380

" Breaking bad habits
inoremap <Up>    <NOP>
inoremap <Down>  <NOP>
inoremap <Left>  <NOP>
inoremap <Right> <NOP>
noremap  <Up>    <NOP>
noremap  <Down>  <NOP>
noremap  <Left>  <NOP>
noremap  <Right> <NOP>

set hidden

" Backspace config
set backspace=indent,eol,start

" Automatically read externally changed files
set autoread

" Save when changing buffers
set autowrite

" Set term window title automatically
set title

" Always keep some context
set scrolloff=3

" Faster tty
set ttyfast

" Always show current position
set ruler

" Don't make backup files
set nobackup

" Don't move to the start of the line all the time
set nostartofline

" Search options
set hlsearch                            " highlight while searching
set incsearch                           " incremental search
set ignorecase
set smartcase

" Tab configuration
set expandtab                           " spaces instead of tabs
set shiftwidth=4                        " use 4 spaces for cindent/autoindent
set softtabstop=4

" Ignores for wildmenu
set wildignore+=.git,node_modules,*.jpg,*.jpeg,*.gif,*.png,*.psd,*/tmp/*

" Other stuff
set laststatus=2                        " always show status line
set showtabline=0                       " never show tab controls
set showcmd                             " show partial commands
set showmatch                           " show matching parentheses
set noballooneval
set noerrorbells                        " No beeps
set nowrap
set splitbelow
set splitright

" GUI-specific stuff
if has("gui_running")
    set guioptions-=T                   " No toolbar
    set guioptions-=r                   " No scrollbars
    set guioptions-=L
    if !has("gui_macvim")
        set guioptions-=m               " No menu except on mac
    endif
    set guicursor=n:blinkon0            " No blinking cursor in normal mode
    " set lines=60 columns=100
    if has("gui_macvim")
        set guifont=Menlo:h14
    else
        set guifont=Deja\ Vu\ Sans\ Mono\ 11
    endif
    set cursorline

    set relativenumber                  " Show line numbers
    set number
    set numberwidth=6                   " Minimum width of line numbers
    set colorcolumn=80                  " Highlight 80th column
endif

let g:ackprg = 'ag --vimgrep'

" Auto-commands
au FocusLost * silent! wall
au FocusGained * if !has('win32') | silent! call fugitive#reload_status() | endif

au FileType eruby,yaml,ruby setlocal sw=2 sts=2

" Autoindent for markdown
au FileType markdown setlocal ai tw=76 wrap lbr

" Syntax folding for XML files
let g:xml_syntax_folding=1
au FileType xml,xsd setlocal foldmethod=syntax | normal zR

au FileType javascript setlocal sw=2 sts=2

" Goyo/Limelight
au! User GoyoEnter Limelight
au! User GoyoLeave Limelight!

" Select pasted text
nnoremap <expr> <Leader>p '`[' . getregtype()[0] . '`]'

" My dinky function to remove Java-stringness.
function! JavaStringToSQL(seltype, ...)
    if a:0   " Invoked from visual mode
        '<,'>s/\v^\s*"(.{-})\s*"[+;,) ]*$/\1/
    else
        '[,']s/\v^\s*"(.{-})\s*"[+;,) ]*$/\1/
    endif
endfunction

nmap <silent> <Leader>j :set opfunc=JavaStringToSQL<CR>g@
vmap <silent> <Leader>j :<C-U>call JavaStringToSQL(visualmode(), 1)<CR>

" Clear search highlight
nmap <silent> <Leader>] :nohlsearch<CR>
